__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
  }

  var R = require(_dependencyMap[0], "ramda");

  var R__default = _interopDefault(R);

  var RS = require(_dependencyMap[1], "ramdasauce");

  var RS__default = _interopDefault(RS);

  var isIoValid = function isIoValid(io) {
    return !R__default.isNil(io);
  };

  var isHostValid = R__default.allPass([R__default.complement(RS__default.isNilOrEmpty), R__default.is(String)]);
  var isPortValid = R__default.allPass([R__default.complement(R__default.isNil), R__default.is(Number), RS__default.isWithin(1, 65535)]);

  var onCommandValid = function onCommandValid(fn) {
    return typeof fn === 'function';
  };

  var validate = function validate(options) {
    var io = options.io,
        host = options.host,
        port = options.port,
        onCommand = options.onCommand;
    if (!isIoValid(io)) throw new Error('invalid io function');
    if (!isHostValid(host)) throw new Error('invalid host');
    if (!isPortValid(port)) throw new Error('invalid port');
    if (!onCommandValid(onCommand)) throw new Error('invalid onCommand handler');
  };

  var logger = function logger() {
    return function (reactotron) {
      return {
        features: {
          log: function log(message) {
            var important = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return reactotron.send('log', {
              level: 'debug',
              message: message
            }, !!important);
          },
          debug: function debug(message) {
            var important = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return reactotron.send('log', {
              level: 'debug',
              message: message
            }, !!important);
          },
          warn: function warn(message) {
            return reactotron.send('log', {
              level: 'warn',
              message: message
            }, true);
          },
          error: function error(message, stack) {
            return reactotron.send('log', {
              level: 'error',
              message: message,
              stack: stack
            }, true);
          }
        }
      };
    };
  };

  var image = function image() {
    return function (reactotron) {
      return {
        features: {
          image: function image(_ref) {
            var uri = _ref.uri,
                preview = _ref.preview,
                filename = _ref.filename,
                width = _ref.width,
                height = _ref.height,
                caption = _ref.caption;
            return reactotron.send('image', {
              uri: uri,
              preview: preview,
              filename: filename,
              width: width,
              height: height,
              caption: caption
            });
          }
        }
      };
    };
  };

  var benchmark = function benchmark() {
    return function (reactotron) {
      var startTimer = reactotron.startTimer;

      var benchmark = function benchmark(title) {
        var steps = [];
        var elapsed = startTimer();

        var step = function step(stepTitle) {
          var previousTime = R.length(steps) === 0 ? 0 : R.last(steps).time;
          var nextTime = elapsed();
          steps.push({
            title: stepTitle,
            time: nextTime,
            delta: nextTime - previousTime
          });
        };

        steps.push({
          title: title,
          time: 0,
          delta: 0
        });

        var stop = function stop(stopTitle) {
          step(stopTitle);
          reactotron.send('benchmark.report', {
            title: title,
            steps: steps
          });
        };

        return {
          step: step,
          stop: stop,
          last: stop
        };
      };

      return {
        features: {
          benchmark: benchmark
        }
      };
    };
  };

  var stateResponses = function stateResponses() {
    return function (reactotron) {
      return {
        features: {
          stateActionComplete: function stateActionComplete(name, action) {
            var important = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            return reactotron.send('state.action.complete', {
              name: name,
              action: action
            }, !!important);
          },
          stateValuesResponse: function stateValuesResponse(path, value) {
            var valid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            return reactotron.send('state.values.response', {
              path: path,
              value: value,
              valid: valid
            });
          },
          stateKeysResponse: function stateKeysResponse(path, keys) {
            var valid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            return reactotron.send('state.keys.response', {
              path: path,
              keys: keys,
              valid: valid
            });
          },
          stateValuesChange: function stateValuesChange(changes) {
            return reactotron.send('state.values.change', {
              changes: changes
            });
          },
          stateBackupResponse: function stateBackupResponse(state) {
            return reactotron.send('state.backup.response', {
              state: state
            });
          }
        }
      };
    };
  };

  var apiResponse = function apiResponse() {
    return function (reactotron) {
      return {
        features: {
          apiResponse: function apiResponse(request, response, duration) {
            var ok = response && response.status && RS.isWithin(200, 299, response.status);
            var important = !ok;
            reactotron.send('api.response', {
              request: request,
              response: response,
              duration: duration
            }, important);
          }
        }
      };
    };
  };

  var clear = function clear() {
    return function (reactotron) {
      return {
        features: {
          clear: function clear() {
            return reactotron.send('clear');
          }
        }
      };
    };
  };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
  };

  var classCallCheck = function classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var UNDEFINED = '~~~ undefined ~~~';
  var NULL = '~~~ null ~~~';
  var FALSE = '~~~ false ~~~';
  var ZERO = '~~~ zero ~~~';
  var EMPTY_STRING = '~~~ empty string ~~~';
  var CIRCULAR = '~~~ Circular Reference ~~~';
  var ANONYMOUS = '~~~ anonymous function ~~~';
  var INFINITY = '~~~ Infinity ~~~';
  var NEGATIVE_INFINITY = '~~~ -Infinity ~~~';

  function getFunctionName(fn) {
    var n = fn.name;

    if (n === null || n === undefined || n === '') {
      return ANONYMOUS;
    } else {
      return '~~~ ' + n + '() ~~~';
    }
  }

  function serialize(source) {
    var stack = [];
    var keys = [];

    function serializer(replacer) {
      return function (key, value) {
        if (value === true) return true;
        if (value === Infinity) return INFINITY;
        if (value === -Infinity) return NEGATIVE_INFINITY;
        if (value === 0) return ZERO;
        if (value === undefined) return UNDEFINED;
        if (value === null) return NULL;
        if (value === false) return FALSE;
        if (value === -0) return ZERO;
        if (value === '') return EMPTY_STRING;

        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
          case 'string':
            return value;

          case 'number':
            return value;

          case 'function':
            return getFunctionName(value);
        }

        if (stack.length > 0) {
          var thisPos = stack.indexOf(this);
          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
          if (~stack.indexOf(value)) value = CIRCULAR;
        } else {
          stack.push(value);
        }

        return replacer == null ? value : replacer.call(this, key, value);
      };
    }

    return JSON.stringify(source, serializer(null));
  }

  var hasHirezNodeTimer = false && (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && process && process.hrtime && typeof process.hrtime === 'function';

  var defaultPerformanceNow = function defaultPerformanceNow() {
    return Date.now();
  };

  var nativePerformance = typeof window !== 'undefined' && window && (window.performance || window.msPerformance || window.webkitPerformance);
  var performanceNow = defaultPerformanceNow;

  var delta = function delta(started) {
    return performanceNow() - started;
  };

  if (hasHirezNodeTimer) {
    performanceNow = process.hrtime;

    delta = function delta(started) {
      return performanceNow(started)[1] / 1000000;
    };
  } else if (global.nativePerformanceNow) {
    performanceNow = global.nativePerformanceNow;
  } else if (nativePerformance) {
    performanceNow = function performanceNow() {
      return nativePerformance.now && nativePerformance.now();
    };
  }

  var start = function start() {
    var started = performanceNow();
    return function () {
      return delta(started);
    };
  };

  var CorePlugins = [image(), logger(), benchmark(), stateResponses(), apiResponse(), clear()];
  var DEFAULTS = {
    io: null,
    host: 'localhost',
    port: 9090,
    name: 'reactotron-core-client',
    secure: false,
    plugins: CorePlugins,
    safeRecursion: true,
    onCommand: function onCommand(cmd) {
      return null;
    },
    onConnect: function onConnect() {
      return null;
    },
    onDisconnect: function onDisconnect() {
      return null;
    },
    socketIoProperties: {
      reconnection: true,
      reconnectionDelay: 2000,
      reconnectionDelayMax: 5000,
      reconnectionAttempts: 5
    }
  };
  var isReservedFeature = R__default.contains(R__default.__, ['options', 'connected', 'socket', 'plugins', 'configure', 'connect', 'send', 'use', 'startTimer']);

  var Client = function () {
    function Client() {
      classCallCheck(this, Client);
      this.options = R__default.merge({}, DEFAULTS);
      this.connected = false;
      this.socket = null;
      this.plugins = [];

      this.startTimer = function () {
        return start();
      };

      this.send = this.send.bind(this);
    }

    createClass(Client, [{
      key: 'configure',
      value: function configure() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var newOptions = R__default.merge(this.options, options);
        validate(newOptions);
        this.options = newOptions;

        if (R__default.has('length', this.options.plugins)) {
          R__default.forEach(this.use.bind(this), this.options.plugins);
        }

        return this;
      }
    }, {
      key: 'connect',
      value: function connect() {
        var _this = this;

        this.connected = true;
        var _options = this.options,
            io = _options.io,
            secure = _options.secure,
            host = _options.host,
            port = _options.port,
            name = _options.name,
            userAgent = _options.userAgent,
            environment = _options.environment,
            reactotronVersion = _options.reactotronVersion,
            socketIoProperties = _options.socketIoProperties;
        var _options2 = this.options,
            onCommand = _options2.onCommand,
            onConnect = _options2.onConnect,
            onDisconnect = _options2.onDisconnect;
        var protocol = secure ? 'wss' : 'ws';
        var socket = io(protocol + '://' + host + ':' + port, _extends({
          jsonp: false,
          transports: ['websocket', 'polling']
        }, socketIoProperties));
        socket.on('connect', function () {
          onConnect && onConnect();
          R__default.forEach(function (plugin) {
            return plugin.onConnect && plugin.onConnect();
          }, _this.plugins);

          _this.send('client.intro', {
            host: host,
            port: port,
            name: name,
            userAgent: userAgent,
            reactotronVersion: reactotronVersion,
            environment: environment
          });
        });
        socket.on('disconnect', function () {
          onDisconnect && onDisconnect();
          R__default.forEach(function (plugin) {
            return plugin.onDisconnect && plugin.onDisconnect();
          }, _this.plugins);
        });
        socket.on('command', function (command) {
          onCommand && onCommand(command);
          R__default.forEach(function (plugin) {
            return plugin.onCommand && plugin.onCommand(command);
          }, _this.plugins);
        });
        this.socket = socket;
        return this;
      }
    }, {
      key: 'send',
      value: function send(type) {
        var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var important = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        if (!this.socket) return;
        var actualPayload = this.options.safeRecursion ? JSON.parse(serialize(payload)) : payload;
        this.socket.emit('command', {
          type: type,
          payload: actualPayload,
          important: !!important
        });
      }
    }, {
      key: 'display',
      value: function display() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var name = config.name,
            value = config.value,
            preview = config.preview,
            image$$1 = config.image,
            _config$important = config.important,
            important = _config$important === undefined ? false : _config$important;
        var payload = {
          name: name,
          value: value || null,
          preview: preview || null,
          image: image$$1 || null
        };
        this.send('display', payload, important);
      }
    }, {
      key: 'reportError',
      value: function reportError(error) {
        this.error(error);
      }
    }, {
      key: 'use',
      value: function use(pluginCreator) {
        var _this2 = this;

        if (typeof pluginCreator !== 'function') throw new Error('plugins must be a function');
        var plugin = pluginCreator.bind(this)(this);
        if (!R__default.is(Object, plugin)) throw new Error('plugins must return an object');

        if (plugin.features) {
          if (!R__default.is(Object, plugin.features)) throw new Error('features must be an object');

          var inject = function inject(key) {
            var featureFunction = plugin.features[key];

            if (typeof featureFunction !== 'function') {
              throw new Error('feature ' + key + ' is not a function');
            }

            if (isReservedFeature(key)) throw new Error('feature ' + key + ' is a reserved name');
            _this2[key] = featureFunction;
          };

          R__default.forEach(inject, R__default.keys(plugin.features));
        }

        this.plugins.push(plugin);
        plugin.onPlugin && typeof plugin.onPlugin === 'function' && plugin.onPlugin.bind(this)(this);
        return this;
      }
    }]);
    return Client;
  }();

  var createClient = function createClient(options) {
    var client = new Client();
    client.configure(options);
    return client;
  };

  exports.CorePlugins = CorePlugins;
  exports.Client = Client;
  exports.createClient = createClient;
  exports.start = start;
});