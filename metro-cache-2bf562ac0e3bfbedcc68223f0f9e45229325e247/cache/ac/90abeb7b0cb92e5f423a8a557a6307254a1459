__d(function (global, require, module, exports, _dependencyMap) {
  var _assign = require(_dependencyMap[0], './_assign');

  var _identity = require(_dependencyMap[1], './_identity');

  var _isArrayLike = require(_dependencyMap[2], './_isArrayLike');

  var _isTransformer = require(_dependencyMap[3], './_isTransformer');

  var objOf = require(_dependencyMap[4], '../objOf');

  module.exports = function () {
    var _stepCatArray = {
      '@@transducer/init': Array,
      '@@transducer/step': function transducerStep(xs, x) {
        xs.push(x);
        return xs;
      },
      '@@transducer/result': _identity
    };
    var _stepCatString = {
      '@@transducer/init': String,
      '@@transducer/step': function transducerStep(a, b) {
        return a + b;
      },
      '@@transducer/result': _identity
    };
    var _stepCatObject = {
      '@@transducer/init': Object,
      '@@transducer/step': function transducerStep(result, input) {
        return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);
      },
      '@@transducer/result': _identity
    };
    return function _stepCat(obj) {
      if (_isTransformer(obj)) {
        return obj;
      }

      if (_isArrayLike(obj)) {
        return _stepCatArray;
      }

      if (typeof obj === 'string') {
        return _stepCatString;
      }

      if (typeof obj === 'object') {
        return _stepCatObject;
      }

      throw new Error('Cannot create transformer for ' + obj);
    };
  }();
});